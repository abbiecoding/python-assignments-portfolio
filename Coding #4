import numpy as np #importing fancy functions 
import matplotlib.pyplot as plt #importing the mat plt so the graph prints 

# Define the gradient descent function
def gradient_descent(f, learning_rate, initial_point, tolerance=1e-5, max_steps=1000):#this is to define how many steps until the funcion stops and the threshold it should stop at
    
    def deriv(f, x):#estimate the derivative, f is the function and the base_point is a random point
        h = 1e-5
        return (f(x + h) - f(x - h)) / (2 * h) #the fancy return functions yayyyyy
    
    x_coords = [initial_point]#This list is where you will store the x_n's
    y_coords = [f(initial_point)] #This list is where you will store the y_n's #PUT YOUR CODE HERE!
    
    for _ in range(max_steps):  #of the function f at base_point using the symmetric approx, symmetric means equal maybe idk
        current_x = x_coords[-1]
        gradient = deriv(f, current_x)
        
        if abs(gradient) < tolerance:
            break
        
        next_x = current_x - learning_rate * gradient
        x_coords.append(next_x)
        y_coords.append(f(next_x))
    
    return x_coords, y_coords

# Define the functions
def graph_1(x):
    return x**2 #this is the first graph 


def graph_2(x):#this is the second graph 
    return 2 * x**4 - 3 * x**3 - 3 * x**2 + 2 * x - 1

def funny_function(x): #this is the funny graph thats not funny
    if x > 0:
        return x**x
    elif x == 0:
        return 1
    else:
        return abs(x)**abs(x)

def graph_3(x): #this is the forth grpah but labeled it the third graph , cause why not
    return np.abs(x)

# Perform gradient descent on the functions
functions = [graph_1, graph_2, funny_function, graph_3]  #labelling the functions so thye will acutally print 
learning_rates = [0.01, 0.01, 0.01, 0.09]
initial_points = [2, 2, 2, 1]

for i, func in enumerate(functions): #plotting the stupid graphs 
    x_coords, y_coords = gradient_descent(func, learning_rates[i], initial_points[i])
    plt.figure(i + 1)
    plot_range = np.linspace(min(x_coords) - 0.5, max(x_coords) + 0.5, 1000)
    function_range = [func(x) for x in plot_range]
    
    plt.plot(plot_range, function_range, label=f'Function {i+1}') #making thegraphs look fancyyyyy
    plt.plot(x_coords, y_coords, color='red', label='Descent Path')
    plt.title(f'Gradient Descent on Function {i+1}')
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.legend()
    plt.grid()

print(f"Function {i+1}: Final point: x = {round(x_coords[-1], 3)}, y = {round(y_coords[-1], 3)}") #telling the coding what to print 

plt.show() #shocking the coding actually worked 



#i hate coding 
